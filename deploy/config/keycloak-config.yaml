apiVersion: v1
kind: Secret
metadata:
  name: keycloak-master-secret
type: Opaque
data:
  username: YWRtaW4=
  password: Z2dnak9IdDdvMg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-realm-realm
data:
  test-realm-realm.json: |-
    {
      "id": "test-realm",
      "realm": "test-realm",
      "displayName": "Keycloak",
      "displayNameHtml": "<div class=\"kc-logo-text\"><span>Keycloak</span></div>",
      "verifiableCredentialsEnabled": true,
      "enabled": true,
      "attributes": {
        "frontendUrl": "https://keycloak.127.0.0.1.nip.io",
        "issuerDid": "${DID}"
        ,
        
        "issuerDid": "${DID}",
        "vc.user-sd.credential_signing_alg_values_supported": "ES256",
        "vc.user-sd.credential_build_config.signing_algorithm": "ES256",
        "vc.user-sd.credential_build_config.token_jws_type": "vc+sd-jwt",
        "vc.user-sd.credential_build_config.proof_types_supported": "{\"jwt\":{\"proof_signing_alg_values_supported\":[\"ES256\"]}}",
        "vc.user-sd.format": "vc+sd-jwt",
        "vc.user-sd.scope": "LegalPersonCredential",
        "vc.user-sd.vct": "LegalPersonCredential",
        "vc.user-sd.credential_build_config.visible_claims": "roles,email",
        "vc.user-sd.credential_build_config.decoys": "3",
        "vc.user-credential.credential_signing_alg_values_supported": "ES256",
        "vc.user-credential.credential_build_config.signing_algorithm": "ES256",
        "vc.user-credential.credential_build_config.token_jws_type": "JWT",
        "vc.user-credential.credential_build_config.proof_types_supported": "{\"jwt\":{\"proof_signing_alg_values_supported\":[\"ES256\"]}}",
        "vc.user-credential.format": "jwt_vc",
        "vc.user-credential.scope": "UserCredential",
        "vc.user-credential.vct": "UserCredential",
        "vc.verifiable-credential.format": "vc+sd-jwt",
        "vc.verifiable-credential.scope": "VerifiableCredential",
        "vc.verifiable-credential.vct": "VerifiableCredential",
        "vc.operator-credential.credential_signing_alg_values_supported": "ES256",
        "vc.operator-credential.credential_build_config.signing_algorithm": "ES256",
        "vc.operator-credential.credential_build_config.token_jws_type": "JWT",
        "vc.operator-credential.credential_build_config.proof_types_supported": "{\"jwt\":{\"proof_signing_alg_values_supported\":[\"ES256\"]}}",
        "vc.operator-credential.format": "jwt_vc",
        "vc.operator-credential.scope": "OperatorCredential",
        "vc.operator-credential.vct": "OperatorCredential"
        
      },
      "sslRequired": "none",
      "roles": {
        "realm": [
          {
            "name": "offline_access",
            "description": "${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "test-realm",
            "attributes": {}
          },
          {
            "name": "uma_authorization",
            "description": "${role_uma_authorization}",
            "composite": false,
            "clientRole": false,
            "containerId": "test-realm",
            "attributes": {}
          },
          {
            "name": "user",
            "description": "User privileges",
            "composite": false,
            "clientRole": false,
            "containerId": "test-realm",
            "attributes": {}
          },
          {
            "name": "default-roles-test-realm",
            "description": "${role_default-roles}",
            "composite": true,
            "composites": {
              "realm": [
                "offline_access",
                "uma_authorization"
              ],
              "client": {
                "account": [
                  "view-profile",
                  "manage-account"
                ]
              }
            },
            "clientRole": false,
            "containerId": "test-realm",
            "attributes": {}
          }
        ],
        "client": {
          
          "${CLIENT_DID}": [
            {
              "name": "customer",
              "description": "Is allowed to see offers etc.",
              "clientRole": true
            },
            {
              "name": "READER",
              "description": "Is allowed to see offers etc.",
              "clientRole": true
            },
            {
              "name": "OPERATOR",
              "description": "Is allowed to operate clusters.",
              "clientRole": true
            },
            {
              "name": "REPRESENTATIVE",
              "description": "Is allowed to register.",
              "clientRole": true
            }],
          "account": [
            {
              "name": "delete-account",
              "description": "${role_delete-account}",
              "composite": false,
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "view-consent",
              "description": "${role_view-consent}",
              "composite": false,
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "view-groups",
              "description": "${role_view-groups}",
              "composite": false,
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "manage-account",
              "description": "${role_manage-account}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "manage-account-links"
                  ]
                }
              },
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "view-profile",
              "description": "${role_view-profile}",
              "composite": false,
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "view-applications",
              "description": "${role_view-applications}",
              "composite": false,
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "manage-consent",
              "description": "${role_manage-consent}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "view-consent"
                  ]
                }
              },
              "clientRole": true,
              "attributes": {}
            },
            {
              "name": "manage-account-links",
              "description": "${role_manage-account-links}",
              "composite": false,
              "clientRole": true,
              "attributes": {}
            }
          ]
          
        }
      },
      "groups": [
        {
          "name": "admin",
          "path": "/admin",
          "realmRoles": [
            "user",
            "default-roles-test-realm"
          ]
        },
        {
          "name": "consumer",
          "path": "/consumer",
          "realmRoles": [
            "user",
            "default-roles-test-realm"
          ]
        }
      ],
      "users": [
        
        {
          "username": "employee",
          "enabled": true,
          "email": "employee@consumer.org",
          "firstName": "Test",
          "lastName": "User",
          "credentials": [
            {
              "type": "password",
              "value": "test"
            }
          ],
          "clientRoles": {
            "${CLIENT_DID}": [
              "customer",
              "REPRESENTATIVE",
              "READER"
            ],
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "groups": [
              "/consumer"
          ]
        },
        {
          "username": "operator",
          "enabled": true,
          "email": "operator@consumer.org",
          "firstName": "Test",
          "lastName": "Operator",
          "credentials": [
            {
              "type": "password",
              "value": "test"
            }
          ],
          "clientRoles": {
            "${CLIENT_DID}": [
              "OPERATOR"
            ],
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "groups": [
              "/consumer"
          ]
        },
        {
          "username": "representative",
          "enabled": true,
          "email": "test@user.org",
          "firstName": "Test",
          "lastName": "Representative",
          "credentials": [
            {
              "type": "password",
              "value": "test"
            }
          ],
          "clientRoles": {
            "${CLIENT_DID}": [
              "REPRESENTATIVE"
            ],
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "groups": [
              "/consumer"
          ]
        }
        
      ],
      "clients": [
        {
          "clientId": "${CLIENT_DID}",
          "enabled": true,
          "description": "Client to connect test.org",
          "surrogateAuthRequired": false,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "defaultRoles": [],
          "redirectUris": [],   
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "client.secret.creation.time": "1675260539"
          },
          "protocolMappers": [
          ],
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/test-realm/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/test-realm/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "realm_client": "false",
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "basic",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "organization",
            "microprofile-jwt"
          ]
        },
        {
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/test-realm/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/test-realm/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "realm_client": "false",
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "706c5202-1b03-4fad-a5b8-484287e941f8",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "basic",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "organization",
            "microprofile-jwt",
            "LegalPersonCredential",
            "OperatorCredential",
            "UserCredential"
          ]
        },
        {
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "realm_client": "false",
            "client.use.lightweight.access.token.enabled": "true"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "basic",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "organization",
            "microprofile-jwt",
            "UserCredential"
          ]
        }
        
      ],
      "clientScopes": [
        {
          "name": "basic",
          "description": "OpenID Connect scope for add all basic claims to the token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "feebb873-c2a4-487b-afae-e7993a3d8082",
              "name": "sub",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-sub-mapper",
              "consentRequired": false,
              "config": {
                "introspection.token.claim": "true",
                "access.token.claim": "true"
              }
            },
            {
              "id": "a2531c5e-0cb4-4228-8d71-7cd03cea45d4",
              "name": "auth_time",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "AUTH_TIME",
                "id.token.claim": "true",
                "introspection.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "auth_time",
                "jsonType.label": "long"
              }
            }
          ]
        },
        {
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {
                "introspection.token.claim": "true",
                "access.token.claim": "true"
              }
            },
            {
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "introspection.token.claim": "true",
                "multivalued": "true",
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String"
              }
            },
            {
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "introspection.token.claim": "true",
                "multivalued": "true",
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        },
        {
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            },
            {
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            },
            {
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            },
            {
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "name": "acr",
          "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "e5d1174a-317e-4ce5-aa52-b95613efed01",
              "name": "acr loa level",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-acr-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "introspection.token.claim": "true",
                "access.token.claim": "true"
              }
            }
          ]
        }
        ,
        
        {
          "name": "LegalPersonCredential",
          "description": "OIDC4VC Scope, that adds all properties required for a user.",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "name": "context-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-context-mapper",
              "config": {
                "context": "https://www.w3.org/2018/credentials/v1",
                "supportedCredentialTypes": "VerifiableCredential,LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "email-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "email",
                "userAttribute": "email",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "firstName-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "firstName",
                "userAttribute": "firstName",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "subject-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "subject",
                "staticValue": "did:key:zDnaeiVpxCT7ARwqLndbWiCeGG2YZXvLfWFs1cGPgKUe8GPLe",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            },
            {
              "name": "street-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "street",
                "staticValue": "Main Street",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            },
            {
              "name": "lastName-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "lastName",
                "userAttribute": "lastName",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential"
              }
            },
            {
              "name": "role-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-target-role-mapper",
              "config": {
                "subjectProperty": "roles",
                "clientId": "${CLIENT_DID}",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "streetNumber-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "streetNumber",
                "staticValue": "10",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            },
            {
              "name": "city-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "city",
                "staticValue": "Dresden",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            },
            {
              "name": "region-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "region",
                "staticValue": "Saxony",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            },
            {
              "name": "country-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "country",
                "staticValue": "Germany",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            },
            {
              "name": "zipcode-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "zipcode",
                "staticValue": "01169",
                "supportedCredentialTypes": "LegalPersonCredential"
              }
            }
          ]
        },
        {
          "name": "UserCredential",
          "description": "OIDC4VC Scope, that adds all properties required for a user.",
          "protocol": "openid-connect",
          "attributes": {},
          "protocolMappers": [
            {
              "name": "context-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-context-mapper",
              "config": {
                "context": "https://www.w3.org/2018/credentials/v1",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "email-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "email",
                "userAttribute": "email",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "firstName-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "firstName",
                "userAttribute": "firstName",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "subject-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "subject",
                "staticValue": "did:key:zDnaeiVpxCT7ARwqLndbWiCeGG2YZXvLfWFs1cGPgKUe8GPLe",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "street-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "street",
                "staticValue": "Main Street",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "lastName-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "lastName",
                "userAttribute": "lastName",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "role-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-target-role-mapper",
              "config": {
                "subjectProperty": "roles",
                "clientId": "${CLIENT_DID}",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "streetNumber-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "streetNumber",
                "staticValue": "10",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "city-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "city",
                "staticValue": "Dresden",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "region-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "region",
                "staticValue": "Saxony",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "country-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "country",
                "staticValue": "Germany",
                "supportedCredentialTypes": "UserCredential"
              }
            },
            {
              "name": "zipcode-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "zipcode",
                "staticValue": "01169",
                "supportedCredentialTypes": "UserCredential"
              }
            }
          ]
        },
        {
          "name": "OperatorCredential",
          "description": "OIDC4VC Scope, that adds all properties required for a user.",
          "protocol": "openid-connect",
          "attributes": {},
          "protocolMappers": [
            {
              "name": "context-mapper-oc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-context-mapper",
              "config": {
                "context": "https://www.w3.org/2018/credentials/v1",
                "supportedCredentialTypes": "VerifiableCredential,LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "email-mapper-oc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "email",
                "userAttribute": "email",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "firstName-mapper-oc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "firstName",
                "userAttribute": "firstName",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "role-mapper-oc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-target-role-mapper",
              "config": {
                "subjectProperty": "roles",
                "clientId": "${CLIENT_DID}",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential,UserCredential"
              }
            },
            {
              "name": "subject-mapper-uc",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-static-claim-mapper",
              "config": {
                "subjectProperty": "subject",
                "staticValue": "did:key:zDnaeiVpxCT7ARwqLndbWiCeGG2YZXvLfWFs1cGPgKUe8GPLe",
                "supportedCredentialTypes": "UserCredential"
              }
            }
          ]
        }
        
      ],
      "defaultDefaultClientScopes": [
        "acr",
        "roles",
        "role_list",
        "email",
        "web-origins",
        "profile"
      ],
      "defaultOptionalClientScopes": [
        "oid4vc_user_scope",
        "microprofile-jwt",
        "phone",
        "address",
        "offline_access"
      ],
      "components": {
        "org.keycloak.protocol.oid4vc.issuance.credentialbuilder.CredentialBuilder": [
          {
            "id": "sd-jwt-builder",
            "name": "sd-jwt-builder",
            "providerId": "vc+sd-jwt"
          },
          {
            "id": "jwt-vc-builder",
            "name": "jwt-vc-builder",
            "providerId": "jwt_vc"
          } 
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "a4589e8f-7f82-4345-b2ea-ccc9d4366600",
            "name": "test-key",
            "providerId": "java-keystore",
            "subComponents": {},
            "config": {
              "keystore": [ "/did-material/cert.pfx" ],
              "keystorePassword": [ "${STORE_PASS}" ],
              "keyAlias": [ "didPrivateKey" ],
              "keyPassword": [ "${STORE_PASS}" ],
              "kid": [ "${DID}"],
              "active": [
                "true"
              ],
              "priority": [
                "0"
              ],
              "enabled": [
                "true"
              ],
              "algorithm": [
                "ES256"
              ]
            }
          }
        ]
      }
    }
